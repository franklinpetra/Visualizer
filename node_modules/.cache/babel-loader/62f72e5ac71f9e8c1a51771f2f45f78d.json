{"ast":null,"code":"export function getBubbleSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  bubbleSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction bubbleSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  bubbleSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  bubbleSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values being Compared; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that being compared; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that being compared; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n} // bubbleSort(array) {\n//     const animations = [];\n//     let end = arr.length -1;\n//     if ( array.length <= 1) return array;\n//     const auxiliaryArray = swapped = false;\n//         for(let i=0, j=1; i < end; i++, j++){\n//             if (arr[i] > arr[j]){\n//             swapped = true;\n//             [arr[i], arr[j]] = [arr[j], arr[i]];\n//             }\n//         }\n//         end --;\n//     }\n//     do {\n//         bubbleSort(unsortedArr);\n//     } \n//     while (swapped);","map":{"version":3,"sources":["/Users/petrafranklin/Coding_DoJo/mern/Assignments/algo_visualizer/src/Algorithms/bubbleSort.js"],"names":["getBubbleSortAnimations","array","animations","length","auxiliaryArray","slice","bubbleSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push"],"mappings":"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","sourcesContent":["export function getBubbleSortAnimations(array){\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    bubbleSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n    \n}\n    function bubbleSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n    ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    bubbleSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    bubbleSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n    }\n\n    function doMerge(\n        mainArray,\n        startIdx,\n        middleIdx,\n        endIdx,\n        auxiliaryArray,\n        animations,\n        ) {\n        let k = startIdx;\n        let i = startIdx;\n        let j = middleIdx + 1;\n        while (i <= middleIdx && j <= endIdx) {\n\n        // These are the values being Compared; we push them once\n        // to change their color.\n        animations.push([i, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j]);\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        }   \n            else {\n            // We overwrite the value at index k in the original array with the\n            // value at index j in the auxiliary array.\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n        }\n\n    while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n    // These are the values that being compared; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that being compared; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n    }\n\n}\n\n\n// bubbleSort(array) {\n//     const animations = [];\n//     let end = arr.length -1;\n    \n//     if ( array.length <= 1) return array;\n//     const auxiliaryArray = swapped = false;\n//         for(let i=0, j=1; i < end; i++, j++){\n//             if (arr[i] > arr[j]){\n//             swapped = true;\n//             [arr[i], arr[j]] = [arr[j], arr[i]];\n//             }\n//         }\n//         end --;\n//     }\n//     do {\n//         bubbleSort(unsortedArr);\n//     } \n//     while (swapped); \n\n\n"]},"metadata":{},"sourceType":"module"}