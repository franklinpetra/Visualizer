{"ast":null,"code":"var _jsxFileName = \"/Users/petrafranklin/Coding_DoJo/mern/Assignments/algo_visualizer/src/AlgoVisualizer/Visualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../Components/algorithms.js';\nimport { getQuickSortAnimations } from '../Components/quickSort.js';\nimport { getBubbleSortAnimations } from '../Components/bubbleSort.js';\nimport './Visualizer.css'; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 1; // const speedHandler = (e) =>{\n//     setSpeed(e.target.value);\n// }\n// Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 70; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'orange'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(4, 530));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {}\n    }\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {}\n    }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 22\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      class: \"button-b\",\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      class: \"button-c\",\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }, \"Quick Sort Hoare\"), /*#__PURE__*/React.createElement(\"button\", {\n      class: \"button-g\",\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }, \"Quick Sort Lomuto\"), /*#__PURE__*/React.createElement(\"button\", {\n      class: \"button-d\",\n      onClick: () => this.heapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      class: \"button-e\",\n      onClick: () => this.bubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 100\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      class: \"button-f\",\n      onClick: () => this.insertionSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    }, \"Insertion Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      class: \"button-k\",\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, \"Stair Climber\"), /*#__PURE__*/React.createElement(\"button\", {\n      class: \"button-a\",\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }, \"Palidrome Tricks\"), /*#__PURE__*/React.createElement(\"button\", {\n      class: \"button-h\",\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }, \"Random River\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 101\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      class: \"button-i\",\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }, \"Create New Array\")));\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n} // function randomColor() {\n// return (Math.floor(Math.random() * 16777215).toString(16)).slice(-6);\n// }\n\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/petrafranklin/Coding_DoJo/mern/Assignments/algo_visualizer/src/AlgoVisualizer/Visualizer.jsx"],"names":["React","getMergeSortAnimations","getQuickSortAnimations","getBubbleSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","bubbleSort","render","map","value","idx","heapSort","insertionSort","min","max","Math","floor","random","arraysAreEqual","arrayOne","arrayTwo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,sBAAR,QAAqC,6BAArC;AACA,SAAQC,sBAAR,QAAqC,4BAArC;AACA,SAAQC,uBAAR,QAAsC,6BAAtC;AACA,OAAO,kBAAP,C,CAEA;;AACA,MAAMC,kBAAkB,GAAG,CAA3B,C,CAEA;AACA;AACA;AAEA;;AACA,MAAMC,oBAAoB,GAAG,EAA7B,C,CAEA;;AACA,MAAMC,aAAa,GAAG,QAAtB,C,CAEA;;AACA,MAAMC,eAAe,GAAG,KAAxB;AAEA,eAAe,MAAMC,iBAAN,SAAgCR,KAAK,CAACS,SAAtC,CAAgD;AAC3DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE;AADE,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,UAAL;AACH;;AAEDA,EAAAA,UAAU,GAAG;AACT,UAAMF,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,oBAApB,EAA0CW,CAAC,EAA3C,EAA+C;AAC3CH,MAAAA,KAAK,CAACI,IAAN,CAAWC,qBAAqB,CAAC,CAAD,EAAI,GAAJ,CAAhC;AACH;;AACD,SAAKC,QAAL,CAAc;AAACN,MAAAA;AAAD,KAAd;AACH;;AAEDO,EAAAA,SAAS,GAAG;AACR,UAAMC,UAAU,GAAGpB,sBAAsB,CAAC,KAAKW,KAAL,CAAWC,KAAZ,CAAzC;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,UAAU,CAACC,MAA/B,EAAuCN,CAAC,EAAxC,EAA4C;AACxC,YAAMO,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;AACA,YAAMC,aAAa,GAAGV,CAAC,GAAG,CAAJ,KAAU,CAAhC;;AACA,UAAIU,aAAJ,EAAmB;AACf,cAAM,CAACC,SAAD,EAAYC,SAAZ,IAAyBP,UAAU,CAACL,CAAD,CAAzC;AACA,cAAMa,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACA,cAAMC,WAAW,GAAGR,SAAS,CAACK,SAAD,CAAT,CAAqBE,KAAzC;AACA,cAAME,KAAK,GAAGhB,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAcT,eAAd,GAAgCD,aAA9C;AACA2B,QAAAA,UAAU,CAAC,MAAM;AACbJ,UAAAA,WAAW,CAACK,eAAZ,GAA8BF,KAA9B;AACAD,UAAAA,WAAW,CAACG,eAAZ,GAA8BF,KAA9B;AACP,SAHa,EAGXhB,CAAC,GAAGZ,kBAHO,CAAV;AAIP,OATG,MASS;AACL6B,QAAAA,UAAU,CAAC,MAAM;AACb,gBAAM,CAACN,SAAD,EAAYQ,SAAZ,IAAyBd,UAAU,CAACL,CAAD,CAAzC;AACA,gBAAMa,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACJD,UAAAA,WAAW,CAACO,MAAZ,GAAsB,GAAED,SAAU,IAAlC;AACC,SAJS,EAIPnB,CAAC,GAAGZ,kBAJG,CAAV;AAKH;AACJ;AACJ;;AAEDiC,EAAAA,SAAS,GAAG;AACR,UAAMhB,UAAU,GAAGnB,sBAAsB,CAAC,KAAKU,KAAL,CAAWC,KAAZ,CAAzC;;AACA,SAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAEK,UAAU,CAACC,MAA7B,EAAqCN,CAAC,EAAtC,EAA0C;AACtC,YAAMO,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;AACA,YAAMC,aAAa,GAAGV,CAAC,GAAG,CAAJ,KAAU,CAAhC;;AACA,UAAIU,aAAJ,EAAmB,CAKlB;AACJ;AACJ;;AAGDY,EAAAA,UAAU,GAAG;AACT,UAAMjB,UAAU,GAAGlB,uBAAuB,CAAC,KAAKS,KAAL,CAAWC,KAAZ,CAA1C;;AACA,SAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAEK,UAAU,CAACC,MAA7B,EAAqCN,CAAC,EAAtC,EAA0C;AACtC,YAAMO,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;AACA,YAAMC,aAAa,GAAGV,CAAC,GAAG,CAAJ,KAAU,CAAhC;;AACA,UAAIU,aAAJ,EAAmB,CAClB;AACJ;AACJ;;AACDa,EAAAA,MAAM,GAAG;AACL,UAAM;AAAC1B,MAAAA;AAAD,QAAU,KAAKD,KAArB;AAEA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGQC,KAAK,CAAC2B,GAAN,CAAU,CAACC,KAAD,EAAQC,GAAR,kBACV;AACI,MAAA,SAAS,EAAC,WADd;AAEI,MAAA,GAAG,EAAEA,GAFT;AAGI,MAAA,KAAK,EAAE;AACPR,QAAAA,eAAe,EAAE5B,aADV;AAEP8B,QAAAA,MAAM,EAAG,GAAEK,KAAM;AAFV,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CAHR,eAaK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbL,eAeI;AAAQ,MAAA,KAAK,EAAC,UAAd;AAAyB,MAAA,OAAO,EAAE,MAAM,KAAKrB,SAAL,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAfJ,eAgBI;AAAQ,MAAA,KAAK,EAAC,UAAd;AAAyB,MAAA,OAAO,EAAE,MAAM,KAAKA,SAAL,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAhBJ,eAiBI;AAAQ,MAAA,KAAK,EAAC,UAAd;AAAyB,MAAA,OAAO,EAAE,MAAM,KAAKA,SAAL,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAjBJ,eAkBI;AAAQ,MAAA,KAAK,EAAC,UAAd;AAAyB,MAAA,OAAO,EAAE,MAAM,KAAKuB,QAAL,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAlBJ,eAmBI;AAAQ,MAAA,KAAK,EAAC,UAAd;AAAyB,MAAA,OAAO,EAAE,MAAM,KAAKL,UAAL,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAnBJ,eAmBmF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBnF,eAoBI;AAAQ,MAAA,KAAK,EAAC,UAAd;AAAyB,MAAA,OAAO,EAAE,MAAM,KAAKM,aAAL,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBApBJ,eAqBI;AAAQ,MAAA,KAAK,EAAC,UAAd;AAAyB,MAAA,OAAO,EAAE,MAAM,KAAKxB,SAAL,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBArBJ,eAsBI;AAAQ,MAAA,KAAK,EAAC,UAAd;AAAyB,MAAA,OAAO,EAAE,MAAM,KAAKL,UAAL,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAtBJ,eAuBI;AAAQ,MAAA,KAAK,EAAC,UAAd;AAAyB,MAAA,OAAO,EAAE,MAAM,KAAKA,UAAL,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAvBJ,eAuBoF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvBpF,eAwBI;AAAQ,MAAA,KAAK,EAAC,UAAd;AAAyB,MAAA,OAAO,EAAE,MAAM,KAAKA,UAAL,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAxBJ,CADJ,CADJ;AAoCH;;AA5G0D;;AA+G3D,SAASG,qBAAT,CAA+B2B,GAA/B,EAAoCC,GAApC,EAAyC;AACrC,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACH,C,CAGD;AACA;AACA;;;AAEA,SAASK,cAAT,CAAwBC,QAAxB,EAAkCC,QAAlC,EAA4C;AAC5C,MAAID,QAAQ,CAAC7B,MAAT,KAAoB8B,QAAQ,CAAC9B,MAAjC,EAAyC,OAAO,KAAP;;AACzC,OAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmC,QAAQ,CAAC7B,MAA7B,EAAqCN,CAAC,EAAtC,EAA0C;AACtC,QAAImC,QAAQ,CAACnC,CAAD,CAAR,KAAgBoC,QAAQ,CAACpC,CAAD,CAA5B,EAAiC;AACjC,aAAO,KAAP;AACC;AACJ;;AACD,SAAO,IAAP;AACC","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../Components/algorithms.js';\nimport {getQuickSortAnimations} from '../Components/quickSort.js';\nimport {getBubbleSortAnimations} from '../Components/bubbleSort.js';\nimport './Visualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// const speedHandler = (e) =>{\n//     setSpeed(e.target.value);\n// }\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 70;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'orange';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(4, 530));\n        }\n        this.setState({array});\n    }\n\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n            }, i * ANIMATION_SPEED_MS);\n        }       else {\n                setTimeout(() => {\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    quickSort() {\n        const animations = getQuickSortAnimations(this.state.array);\n        for(let i = 0; i <animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) { \n                \n                \n\n\n            }\n        }\n    }\n    \n\n    bubbleSort() {\n        const animations = getBubbleSortAnimations(this.state.array);\n        for(let i = 0; i <animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) { \n            }\n        }\n    }\n    render() {\n        const {array} = this.state;\n\n        return (\n            <div>\n                <div className=\"array-container\">\n\n                {\n                        array.map((value, idx) => (\n                        <div\n                            className=\"array-bar\"\n                            key={idx}\n                            style={{\n                            backgroundColor: PRIMARY_COLOR,\n                            height: `${value}px`,\n                            }}>\n                        </div> \n                        ))\n                    }<br></br>\n                    \n                    <button class=\"button-b\" onClick={() => this.mergeSort()}>Merge Sort</button>\n                    <button class=\"button-c\" onClick={() => this.mergeSort()}>Quick Sort Hoare</button>\n                    <button class=\"button-g\" onClick={() => this.mergeSort()}>Quick Sort Lomuto</button>\n                    <button class=\"button-d\" onClick={() => this.heapSort()}>Heap Sort</button>\n                    <button class=\"button-e\" onClick={() => this.bubbleSort()}>Bubble Sort</button><br></br>\n                    <button class=\"button-f\" onClick={() => this.insertionSort()}>Insertion Sort</button>\n                    <button class=\"button-k\" onClick={() => this.mergeSort()}>Stair Climber</button>\n                    <button class=\"button-a\" onClick={() => this.resetArray()}>Palidrome Tricks</button>\n                    <button class=\"button-h\" onClick={() => this.resetArray()}>Random River</button><br></br>\n                    <button class=\"button-i\" onClick={() => this.resetArray()}>Create New Array</button>                    \n                </div>\n                {/* <form>\n                <div class=\"form-group\">\n                    <label for=\"formControlRange\">Example Range input</label>\n                    <input type=\"range\" class=\"form-control-range\" id=\"formControlRange\">\n                </div>\n                </form> */}\n            </div>\n        );\n    }\n}\n\n    function randomIntFromInterval(min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n\n    // function randomColor() {\n    // return (Math.floor(Math.random() * 16777215).toString(16)).slice(-6);\n    // }\n    \n    function arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) {\n        return false;\n        }\n    }\n    return true;\n    }\n"]},"metadata":{},"sourceType":"module"}