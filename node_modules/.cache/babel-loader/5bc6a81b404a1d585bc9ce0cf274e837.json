{"ast":null,"code":"//In this one, I want to divide the array into two separate arrays and then four and so forth to make it clear that is what is happening...\n//Then I want to step them back together animating with each addition.\nfunction merge(a, lo, m, hi) {\n  var tmp = [];\n  var len = m - lo;\n  var i, j, k; // save left subarray\n\n  for (i = 0; i < len; i++) {\n    // animate this move\n    tmp[i] = a[lo + i];\n  } // merge subarrays\n\n\n  i = 0;\n  j = m;\n  k = lo;\n\n  while (i < len && j < hi) {\n    if (tmp[i] <= a[j]) {\n      // animate this move\n      a[k++] = tmp[i++];\n    } else {\n      // animate this move\n      a[k++] = a[j++];\n    }\n  } // copy the remaining elements\n\n\n  while (i < len) {\n    // animate this move\n    a[k++] = tmp[i++];\n  }\n}\n\nfunction mergesort(a, lo, hi) {\n  if (hi - lo > 1) {\n    var m = lo + (hi - lo >> 1);\n    mergesort(a, lo, m);\n    mergesort(a, m, hi);\n    merge(a, lo, m, hi);\n  }\n}","map":{"version":3,"sources":["/Users/petrafranklin/Coding_DoJo/mern/Assignments/visualizer/algo_visualizer/src/Components/mergeSort.js"],"names":["merge","a","lo","m","hi","tmp","len","i","j","k","mergesort"],"mappings":"AAAA;AACA;AAGA,SAASA,KAAT,CAAeC,CAAf,EAAkBC,EAAlB,EAAsBC,CAAtB,EAAyBC,EAAzB,EAA6B;AACzB,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,GAAG,GAAGH,CAAC,GAAGD,EAAd;AACA,MAAIK,CAAJ,EAAOC,CAAP,EAAUC,CAAV,CAHyB,CAIzB;;AACA,OAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,GAAhB,EAAqBC,CAAC,EAAtB,EAA0B;AACtB;AACAF,IAAAA,GAAG,CAACE,CAAD,CAAH,GAASN,CAAC,CAACC,EAAE,GAAGK,CAAN,CAAV;AACH,GARwB,CASzB;;;AACAA,EAAAA,CAAC,GAAG,CAAJ;AACAC,EAAAA,CAAC,GAAGL,CAAJ;AACAM,EAAAA,CAAC,GAAGP,EAAJ;;AACA,SAAOK,CAAC,GAAGD,GAAJ,IAAWE,CAAC,GAAGJ,EAAtB,EAA0B;AACtB,QAAIC,GAAG,CAACE,CAAD,CAAH,IAAUN,CAAC,CAACO,CAAD,CAAf,EAAoB;AAChB;AACAP,MAAAA,CAAC,CAACQ,CAAC,EAAF,CAAD,GAASJ,GAAG,CAACE,CAAC,EAAF,CAAZ;AACH,KAHD,MAGO;AACH;AACAN,MAAAA,CAAC,CAACQ,CAAC,EAAF,CAAD,GAASR,CAAC,CAACO,CAAC,EAAF,CAAV;AACH;AACJ,GArBwB,CAsBzB;;;AACA,SAAOD,CAAC,GAAGD,GAAX,EAAgB;AACZ;AACAL,IAAAA,CAAC,CAACQ,CAAC,EAAF,CAAD,GAASJ,GAAG,CAACE,CAAC,EAAF,CAAZ;AACH;AACJ;;AAED,SAASG,SAAT,CAAmBT,CAAnB,EAAsBC,EAAtB,EAA0BE,EAA1B,EAA8B;AAC1B,MAAIA,EAAE,GAAGF,EAAL,GAAU,CAAd,EAAiB;AACb,QAAIC,CAAC,GAAGD,EAAE,IAAKE,EAAE,GAAGF,EAAN,IAAa,CAAjB,CAAV;AACAQ,IAAAA,SAAS,CAACT,CAAD,EAAIC,EAAJ,EAAQC,CAAR,CAAT;AACAO,IAAAA,SAAS,CAACT,CAAD,EAAIE,CAAJ,EAAOC,EAAP,CAAT;AACAJ,IAAAA,KAAK,CAACC,CAAD,EAAIC,EAAJ,EAAQC,CAAR,EAAWC,EAAX,CAAL;AACH;AACJ","sourcesContent":["//In this one, I want to divide the array into two separate arrays and then four and so forth to make it clear that is what is happening...\n//Then I want to step them back together animating with each addition.\n\n\nfunction merge(a, lo, m, hi) {\n    var tmp = [];\n    var len = m - lo;\n    var i, j, k;\n    // save left subarray\n    for (i = 0; i < len; i++) {\n        // animate this move\n        tmp[i] = a[lo + i];\n    }\n    // merge subarrays\n    i = 0;\n    j = m;\n    k = lo;\n    while (i < len && j < hi) {\n        if (tmp[i] <= a[j]) {\n            // animate this move\n            a[k++] = tmp[i++];\n        } else {\n            // animate this move\n            a[k++] = a[j++];\n        }\n    }\n    // copy the remaining elements\n    while (i < len) {\n        // animate this move\n        a[k++] = tmp[i++];\n    }\n}\n\nfunction mergesort(a, lo, hi) {\n    if (hi - lo > 1) {\n        var m = lo + ((hi - lo) >> 1);\n        mergesort(a, lo, m);\n        mergesort(a, m, hi);\n        merge(a, lo, m, hi);\n    }\n}"]},"metadata":{},"sourceType":"module"}